(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{109:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),b=r,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||o;return n?a.a.createElement(m,s(s({ref:t},p),{},{components:n})):a.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},90:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),o=(n(0),n(109)),i={id:"quick_start",title:"Quick Start",sidebar_label:"Quick Start",slug:"/"},s={unversionedId:"getting_started/quick_start",id:"getting_started/quick_start",isDocsHomePage:!1,title:"Quick Start",description:"Installation",source:"@site/docs/getting_started/quick_start.md",slug:"/",permalink:"/overreact-core/",editUrl:"https://github.com/microsoft/overreact-core/packages/website/edit/master/website/docs/getting_started/quick_start.md",version:"current",lastUpdatedBy:"Like Zhu",lastUpdatedAt:1622581971,sidebar_label:"Quick Start",sidebar:"someSidebar",next:{title:"Mutating Data",permalink:"/overreact-core/getting_started/mutation"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Setup your app",id:"setup-your-app",children:[{value:"Configure your network requestor",id:"configure-your-network-requestor",children:[]},{value:"Configure a schema",id:"configure-a-schema",children:[]},{value:"Initialize a DataFetcher",id:"initialize-a-datafetcher",children:[]}]},{value:"Create data specs",id:"create-data-specs",children:[]},{value:"Create your first overreact UI component",id:"create-your-first-overreact-ui-component",children:[]},{value:"What&#39;s Next?",id:"whats-next",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,"Install overreact using ",Object(o.b)("inlineCode",{parentName:"p"},"yarn")," or ",Object(o.b)("inlineCode",{parentName:"p"},"npm"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"yarn add @bingads-webui/overreact\n")),Object(o.b)("h2",{id:"setup-your-app"},"Setup your app"),Object(o.b)("p",null,"In this guide, we're going to build an app that talks with the infamous ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.odata.org/getting-started/understand-odata-in-6-steps/"}),"TripPin")," service, which exposes a typical OData endpoint at ",Object(o.b)("inlineCode",{parentName:"p"},"https://services.odata.org/v4/TripPinServiceRW")),Object(o.b)("h3",{id:"configure-your-network-requestor"},"Configure your network requestor"),Object(o.b)("p",null,"overreact doesn't explicitly use any specific API to issue network requests (",Object(o.b)("inlineCode",{parentName:"p"},"$.ajax"),", ",Object(o.b)("inlineCode",{parentName:"p"},"fetch"),", etc.), instead, it allows you to customize how your application wants to make requests to the network. In our app, we'll go with the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"}),Object(o.b)("inlineCode",{parentName:"a"},"fetch")," API"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="network-requestor.js"',title:'"network-requestor.js"'}),"export function networkRequestor(uri, requestVerb, headers, body) {\n    const endpoint = 'https://services.odata.org/v4/TripPinServiceRW';\n    const requestUrl = `${endpoint}${uri}`;\n\n    return fetch(url, {\n        method: requestVerb,\n        headers,\n        body: JSON.stringify(body),\n    }).then(response => response.json());\n}\n")),Object(o.b)("h3",{id:"configure-a-schema"},"Configure a schema"),Object(o.b)("p",null,"A ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/concept/schema"}),"schema")," describes what entities are available and what name (alias) your app should call those entities internally."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="schema.js"',title:'"schema.js"'}),"import { Schema } from '@bingads-webui/overreact';\n\nconst schemaToModelMapping = {\n    people: 'People',\n    trip: 'Trip',\n    airline: 'Airline',\n    // more entities go here ...\n};\n\nexport const schema = new Schema(schemaToModelMapping, () => {});\n")),Object(o.b)("h3",{id:"initialize-a-datafetcher"},"Initialize a DataFetcher"),Object(o.b)("p",null,"Now let's initalize overreact to run in your app. To do that, simply put a ",Object(o.b)("inlineCode",{parentName:"p"},"DataFetcher")," component in your app, and have it wrap all UI components that requires data operations:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="app.js"',title:'"app.js"'}),"import React from 'react';\nimport { \n    DataFetcher,\n    Environment,\n    Store,\n} from '@bingads-webui/overreact';\n\n// Previously defined schema and network requestor\nimport { networkRequestor } from './network-requestor';\nimport { schema } from './schema';\n\n// React component that will talk to the TripPin service\nimport { PeopleContainer } from './people-container';\n\nexport default function App() {\n    // define an Environment object to configure overreact\n    const store = new Store();\n    const tripPinEnvironment = new Environment(networkRequestor, schema, store, []);\n\n    return (\n        <div className=\"app-container\">\n            <DataFetcher environment={tripPinEnvironment}>\n                <PeopleContainer userName=\"russellwhyte\" />\n            </DataFetcher>\n        </div>\n    );\n}\n")),Object(o.b)("p",null,"Now that overreact has now been initialized, we need to tell overreact how to construct actual network requests for different entities, and how to store them locally."),Object(o.b)("h2",{id:"create-data-specs"},"Create data specs"),Object(o.b)("p",null,"In our app, we'll look for a specific ",Object(o.b)("inlineCode",{parentName:"p"},"People"),' entity, whose name is "russellwhyte", from the TripPin service. To do that, let\'s create a data spec for ',Object(o.b)("inlineCode",{parentName:"p"},"People"),". This spec allows overreact to issue a HTTP GET call, like this:"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"GET ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://services.odata.org/v4/TripPinServiceRW/People('russellwhyte')"}),"https://services.odata.org/v4/TripPinServiceRW/People('russellwhyte')")," HTTP/1.1")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="people-spec.js"',title:'"people-spec.js"'}),"import {\n    createRequestContract,\n    createResponseContract,\n    createSpec,\n\n    requestVerbs,\n    responseTypes,\n    specTypes,\n} from '@bingads-webui/overreact';\n\nimport { schema } from './schema';\n\nfunction odataUriFactory(params) {\n    const { variables } = params;\n    const { locator } = variables;\n    const { descriptor, order } = locator;\n    const { userName } = descriptor;\n\n    return `/People(${userName})`;\n}\n\nconst odataHeaderFactory = () => {};\n\nconst requestContract = createRequestContract({\n    schema,\n    dataPath: 'people',\n    verb: requestVerbs.GET,\n    uriFactoryFn: odataUriFactory,\n    headerFactoryFn: odataHeaderFactory,\n    keySelector: p => p.UserName,\n});\n\nconst responseContract = createResponseContract({\n    requestContract: requestContract,\n    responseType: responseTypes.ENTITY,\n    keySelector: p => p.UserName,\n});\n\nexport const peopleSpec = \n    createSpec(requestContract, responseContract, specTypes.FETCH, null);\n\n")),Object(o.b)("p",null,"Finally, let's construct a React component that consumes the data."),Object(o.b)("h2",{id:"create-your-first-overreact-ui-component"},"Create your first overreact UI component"),Object(o.b)("p",null,"By now, we have all the required pieces ready to make the actual network call. Let's assume our app contains two text field, showing a user's name and address from the TripPin service."),Object(o.b)("p",null,"We begin by issuing the call using the ",Object(o.b)("inlineCode",{parentName:"p"},"useFetch")," hook from overreact."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="people-container.js"',title:'"people-container.js"'}),"import React, { useMemo } from 'react';\nimport { \n    useFetch,\n    useDataRefId,\n} from '@bingads-webui/overreact';\n\nimport { peopleSpec } from './people-spec';\nimport { PeopleView } from './people-view';\n\nexport function PeopleContainer(props) {\n    const { userName } = props;\n    const dataRefId = useDataRefId();\n\n    const variables = useMemo(() => ({\n        locator: {\n            descriptor: { people: userName },\n            order: ['people'],\n        },\n    }), [userName]);\n\n    const [data] = useFetch(dataRefId, peopleSpec, variables);\n\n    return (data && <PeopleView \n        firstName={data.FirstName}\n        lastName={data.LastName}\n        address={data.AddressInfo[0]}\n    >);\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="people-view.js"',title:'"people-view.js"'}),"import React from 'react';\n\nexport function PeopleView(props) {\n    const { firstName, lastName, address } = props;\n    const { Address } = address;\n\n    return (\n        <div className=\"people-view\">\n            <span>{`${firstName} ${lastName}`}</span>\n            <span>{Address}</span>\n        </div>\n    );\n}\n")),Object(o.b)("p",null,"That's it! Run your app and you should see a network request going out to ",Object(o.b)("inlineCode",{parentName:"p"},"https://services.odata.org/v4/(S(wzb13shf21muw3is3clriogh))/TripPinServiceRW/People('russellwhyte')")," (the actual URL listening to the requests), and the response should be rendered on the page."),Object(o.b)("h2",{id:"whats-next"},"What's Next?"),Object(o.b)("p",null,"overreact does more than just fetching data from network. It also provides rich support for the following scenarios:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/getting_started/mutation"}),"Data mutation")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/getting_started/pagination"}),"Pagination")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/getting_started/middleware"}),"Adding middleware")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/getting_started/error"}),"Handling errors"))),Object(o.b)("p",null,"You can click on each topic to learn more details. Additionally, please go to ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/concept/data_structure"}),"Data Structure")," section to learn about how overreact stores data internally."))}l.isMDXComponent=!0}}]);