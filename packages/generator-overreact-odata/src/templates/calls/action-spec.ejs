/* eslint-disable camelcase */
import {
  createRequestContract,
  createResponseContract,
  createSpec,

  requestVerbs,
  responseTypes,
  specTypes,
} from '@microsoft/overreact';

import { composeSearchString } from '@microsoft/overreact-odata';

import { edm } from '<%= edmLocation %>';
import { environmentLookupFn } from '<%= envLocation %>';
import { schema } from '<%= schemaLocation %>';

import {
  urlDecorator,
  headerDecorator,
  payloadDecorator,
  processorDecorator,
  keySelectorDecorator,
  sideEffects,

  networkPolicy,
} from './action-decorators';

function odataUrlFactory(params) {
  const { variables } = params;
  const { locator: { descriptor }, ...rest } = variables;
  const {
<% for (const descriptor of descriptorList) { -%>
    <%- descriptor %>,
<% } -%>
  } = descriptor;

  const edmEntity = edm
<% for (const s of odataUriSegments) { -%>
    <%- s %>
<% } -%>

  const searchString = composeSearchString(variables, edmEntity, <%- isColl %>);
  return `${edmEntity.path}${searchString}`;
}

function odataHeaderFactory(params) {
  return params.headers;
}

function odataPayloadFactory(params) {
  return params.data;
}

const requestContract = createRequestContract({
  schema,
  dataPath: '<%= dataPath %>',
  verb: requestVerbs.POST,
  fetchPolicy: networkPolicy,
  uriFactoryFn: urlDecorator(odataUrlFactory),
  headerFactoryFn: headerDecorator(odataHeaderFactory),
  payloadFactoryFn: payloadDecorator(odataPayloadFactory),
  parentKeySelector: variables => variables.locator.descriptor.<%- parentKey %>,
});

const responseContract = createResponseContract({
  requestContract,
  responseType: <%- responseType %>,
  keySelector: keySelectorDecorator(<%- key %>),
  processorFn: processorDecorator(<%- processor %>),
});

export const fetchSpec = createSpec(
  requestContract,
  responseContract,
  specTypes.FETCH,
  sideEffects.fetch,
  environmentLookupFn
);

export const actionSpec = createSpec(
  requestContract,
  responseContract,
  specTypes.MUTATION,
  sideEffects.mutation,
  environmentLookupFn
);
