import { useCallback, useMemo } from 'react';
import stringify from 'json-stable-stringify';

import {
  useDataRefId,
  usePagination,
  useMutation,
  useRefetch,
} from '@microsoft/overreact';

import { environmentLookupFn } from '<%= envLocation %>';

import { addSpec } from '../../__specs/coll/add-spec';
import { destroySpec } from '../../__specs/coll/destroy-spec';
import { fetchSpec, refetchSpec } from '../../__specs/coll/fetch-spec';
import { mutationSpec } from '../../__specs/coll/mutation-spec';

export function <%- hookName %>(variables, config = {}) {
  const { locator } = variables;
  const dataRefId = useDataRefId(`coll_${stringify(locator)}`, environmentLookupFn);

  const defaultConfig = useMemo(() => ({
    refetch: config.refetch || {},
    mutation: config.mutation || {},
    destroy: config.destroy || {},
    pagination: config.pagination || {},
    create: config.add || {},
  }), [config]);

  const {
    refetch: refetchConfig,
    mutation: mutationConfig,
    destroy: destroyConfig,
    pagination: paginationConfig,
    create: createConfig,
  } = defaultConfig;

  const [data, paginationMethods] = usePagination(dataRefId, fetchSpec, paginationConfig);
  const mutateFn = useMutation(dataRefId, mutationSpec, mutationConfig);
  const destroyFn = useMutation(dataRefId, destroySpec, destroyConfig);
  const createFn = useMutation(dataRefId, addSpec, createConfig);
  const refetchFn = useRefetch(dataRefId, refetchSpec, refetchConfig);

  const update = useCallback((newData, ...rest) => {
    mutateFn({ ...locator }, newData, ...rest);
  }, [mutateFn, locator]);

  // FIXME: likezh: Why would destroy need data?
  const destroy = useCallback((newData, ...rest) => {
    destroyFn({ ...locator }, newData, ...rest);
  }, [destroyFn, locator]);

  const create = useCallback((newData, ...rest) => {
    createFn({ ...locator }, newData, ...rest);
  }, [createFn, locator]);

  const refetch = useCallback((parameter, ...rest) => {
    refetchFn(
      {
        variables: {
          ...variables,
          ...parameter.variables,
        },
        payload: parameter.payload,
      },
      refetchConfig,
      ...rest
    );
  }, [refetchFn, refetchConfig, variables]);

  const { loadMore, hasMore, isLoading } = paginationMethods;

  return [data, {
    loadMore,
    hasMore,
    isLoading,
    create,
    update,
    destroy,
    refetch,
  }];
}
