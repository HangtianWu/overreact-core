import { useCallback, useMemo } from 'react';
import stringify from 'json-stable-stringify';

import {
  useFetch,
  useRefetch,
  useDataRefId,
} from '@microsoft/overreact';

import { environmentLookupFn } from '<%= envLocation %>';
import { fetchSpec, refetchSpec } from '../../__specs/calls/func-spec';

export function <%- hookName %>(variables, config = {}) {
  const { dataLocator } = variables;
  const dataRefId = useDataRefId(`call_${stringify(dataLocator)}`, environmentLookupFn);

  const defaultConfig = useMemo(() => ({
    refetch: config.refetch || {},
    fetch: config.fetch || {},
  }), [config]);

  const { fetch: fetchConfig, refetch: refetchConfig } = defaultConfig;

  const fetch = useFetch(dataRefId, fetchSpec, dataLocator, fetchConfig);
  const func = useRefetch(dataRefId, refetchSpec, refetchConfig);

  const callFn = useCallback((param = {}, requestConfig, ...rest) => {
    func(
      {
        variables: {
          ...dataLocator,
          ...param.variables,
        },
      },
      requestConfig,
      ...rest
    );
  }, [dataLocator, func]);

  const [data, error] = fetch;

  return [{ data, error }, { callFn }];
}
