import { useCallback, useMemo } from 'react';
import stringify from 'json-stable-stringify';

import {
  useFetch,
  useMutation,
  useDataRefId,
} from '@microsoft/overreact';

import { environmentLookupFn } from '<%= envLocation %>';
import { fetchSpec, actionSpec } from '../../__specs/calls/action-spec';

export function <%- hookName %>(variables, config = {}) {
  const { locator } = variables;
  const dataRefId = useDataRefId(`call_${stringify(locator)}`, environmentLookupFn);

  const defaultConfig = useMemo(() => ({
    mutation: config.mutation || {},
    fetch: config.fetch || {},
  }), [config]);

  const { fetch: fetchConfig, mutation: mutationConfig } = defaultConfig;

  const fetch = useFetch(dataRefId, fetchSpec, locator, fetchConfig);
  const action = useMutation(dataRefId, actionSpec, mutationConfig);

  const callFn = useCallback((param = {}, requestConfig, ...rest) => {
    action(
      {
        ...variables,
        ...param.variables,
      },
      param.payload,
      requestConfig,
      ...rest
    );
  }, [variables, action]);

  const [data, error] = fetch;

  return [{ data, error }, { callFn }];
}
