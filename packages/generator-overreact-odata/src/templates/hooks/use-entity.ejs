import { useCallback, useMemo } from 'react';
import stringify from 'json-stable-stringify';

import {
  useDataRefId,
  useFetch,
  useMutation,
  useRefetch,
} from '@microsoft/overreact';

import { environmentLookupFn } from '<%= envLocation %>';

import { destroySpec } from '../../__specs/entity/destroy-spec';
import { fetchSpec, refetchSpec } from '../../__specs/entity/fetch-spec';
import { mutationSpec } from '../../__specs/entity/mutation-spec';

export function <%- hookName %>(variables, config = {}) {
  const { locator } = variables;
  const dataRefId = useDataRefId(`entity_${stringify(locator)}`, environmentLookupFn);

  const defaultConfig = useMemo(() => ({
    fetch: config.fetch || {},
    refetch: config.refetch || {},
    mutation: config.mutation || {},
    destroy: config.destroy || {},
  }), [config]);

  const {
    fetch: fetchConfig,
    refetch: refetchConfig,
    mutation: mutationConfig,
    destroy: destroyConfig,
  } = defaultConfig;

  const [data, error] = useFetch(dataRefId, fetchSpec, variables, fetchConfig);
  const mutateFn = useMutation(dataRefId, mutationSpec, mutationConfig);
  const destroyFn = useMutation(dataRefId, destroySpec, destroyConfig);
  const refetchFn = useRefetch(dataRefId, refetchSpec, refetchConfig);

  const update = useCallback((newData, ...rest) => {
    mutateFn(variables, newData, ...rest);
  }, [mutateFn, variables]);

  // FIXME: likezh: Why would destroy need data?
  const destroy = useCallback((newData, ...rest) => {
    destroyFn(variables, newData, ...rest);
  }, [destroyFn, variables]);

  const refetch = useCallback((parameter, ...rest) => {
    refetchFn(
      {
        variables: {
          ...variables,
          ...parameter.variables,
        },
        payload: parameter.payload,
      },
      refetchConfig,
      ...rest
    );
  }, [refetchFn, refetchConfig, variables]);

  return [{ data, error }, { update, destroy, refetch }];
}
