/* eslint-disable camelcase */
import {
  createRequestContract,
  createResponseContract,
  createSpec,

  requestVerbs,
  responseTypes,
  specTypes,
} from '@microsoft/overreact';

import { composeSearchString } from '@microsoft/overreact-odata';

import { edm } from '<%= edmLocation %>';
import { environmentLookupFn } from '<%= envLocation %>';
import { schema } from '<%= schemaLocation %>';

import {
  urlDecorator,
  headerDecorator,
  payloadDecorator,
  processorDecorator,

  networkPolicy,
} from './destroy-decorators';

function odataUrlFactory(params) {
  const { variables } = params;
  const { locator, cursorIndex } = variables;
  const { descriptor } = locator;
  const {
<% for (const descriptor of descriptorList) { -%>
    <%- descriptor %>,
<% } -%>
  } = descriptor;

  const edmEntity = edm
<% for (const s of odataUriSegments) { -%>
    <%- s %>
<% } -%>

  const searchString = composeSearchString(variables, edmEntity);
  return `${edmEntity.path}${searchString}`;
}

function odataHeaderFactory(params) {
  const { headers } = params;
  return headers;
}

const requestContract = createRequestContract({
  schema,
  dataPath: '<%= dataPath %>',
  verb: requestVerbs.DELETE,
  fetchPolicy: networkPolicy,
  uriFactoryFn: urlDecorator(odataUrlFactory),
  headerFactoryFn: headerDecorator(odataHeaderFactory),
});

const responseContract = createResponseContract({
  requestContract,
  responseType: responseTypes.COLL,
  keySelector: r => r.<%= key %>,
  processorFn: processorDecorator(r => r.value),
});

export const destroySpec = createSpec(
  requestContract,
  responseContract,
  specTypes.DELETE,
  null,
  environmentLookupFn,
);
